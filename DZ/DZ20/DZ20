#Создайте декоратор, который будет проверять
#возвращаемое функцией значение, и если оно
#меньше 0, будет заменять его на 0.
#Таким образом, этот декоратор будет
#"отменять" отрицательные числа

def positive_numbers(func):
    def _wrapper(*args):
        result = func(*args)
        if result < 0:
            result = 0
        return result
    return _wrapper

@positive_numbers
def calculation(a, b):
    return a * b

@positive_numbers
def sub(a, b):
    return a - b

print(calculation(5, 2))
print(calculation(-5, 2))
print(sub(5, 2))
print(sub(-5, 2))

#Создайте декоратор для повторной попытки
#выполнения функции с определенным
#колличеством попыток в случае сбоя

import requests

message = "Connected error."
class MyCustomError(Exception):
    def __init__(self, message):
        super().__init__(message)



def retry(num):
    def _decor(func):
        def _wrapper(*args):
            count = 0
            while count < num:
                try:
                    result = func(*args)
                    return result
                except:
                    count += 1
            else:
                raise MyCustomError(message)

        return _wrapper
    return _decor

@retry(3)
def get_url(url):
    response = requests.get(url)
    response.raise_for_status()
    return response.content

url = "https://example.com"
content = get_url(url)
print('content', content)
