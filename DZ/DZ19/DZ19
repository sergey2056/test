#class Phonebook:
# add_contact(name, phone_number) -> None (Добавляет контакт в книгу)
# remove_contact(name) -> None (Удаляет контакт если он был, иначе
# выводит сообщение об ошибке)
import time


# update_contact(name, phone_number) -> None (Изменяет номер
# телефона у контакта с именем name)

# get_contact(name) -> str(phone_number) (Возвращает номер телефона по имени)
# get_all_contacts() -> list (Возвращает список всех записей)

import json
class Phonebook:
    def __init__(self):
        self.file = {}
        try:
            with open(file='phonebook.txt', mode='r', encoding='utf-8') as f:
                self.file = json.load(f)
        except FileNotFoundError:
            print('Такого файла не существует. Воспользуйтесь функцией сохранения файла')

    def save(self):
        with open(file='phonebook.txt', mode='w', encoding='UTF-8') as f:
            json.dump(self.file, f)

    def add_contact(self, name, phone_number):
        if name in self.file:
            raise ValueError('Такой обонент уже существует')
        else:
            self.file[name] = phone_number

    def remove_contact(self, name):
        if name in self.file:
            self.file.pop(name)
        else:
            raise ValueError('Такой записи не существует')

    def update_contact(self, name, phone_number):
        if name in self.file:
            self.file[name] = phone_number
        else:
            raise ValueError('Такой записи не существует')

    def get_contact(self, name):
        if name in self.file:
            return self.file[name]
        else:
            raise ValueError('Такой записи не существует')

    def get_all_contacts(self):
        print(f'\nФИО', end='\t\t\t\t\t\t\t\t\t\t\t\t\t')
        print(f'ТЕЛ\n')
        for key, val in self.file.items():
            print(f'{key}', end='')
            for i in range(0, 52-len(key)):
                print(' ', end='')
            print(f'{val}')

fl = Phonebook()
# fl.save()
# fl.add_contact('Иванов Сергей Петрович', '+79884563211')
fl.add_contact('Иванов Денис Петрович', '+79884563233')
# fl.add_contact('Сидоров Сергей Михайлович', '+79884563244')
# fl.add_contact('Кошелев Андрей Николаевич', '+79884563238')
fl.get_all_contacts()
print(f'\nИванов Денис Петрович: ', fl.get_contact('Иванов Денис Петрович'))
fl.remove_contact('Иванов Денис Петрович')
fl.get_all_contacts()
fl.update_contact('Сидоров Сергей Михайлович', '+78889992233')
fl.get_all_contacts()
fl.save()


# class Timer:
# Реализуйте класс Timer, поддерживающий следующие методы:
#
# start(): запускает таймер
# stop(): останавливает таймер
# reset(): сбрасывает таймер на ноль
# elapsed_time(): возвращает время, прошедшее с
# момента запуска таймера, в секундах

import time
class Timer:
    def __init__(self):
        self._start_time = None
        self.elapsed_time = 0

    def startTime(self):
        if self._start_time is not None:
            raise ValueError(f'Таймер уже работает. Используйте .stop()')
        self._start_time = time.perf_counter()

    def stopTime(self):
        self._start_time = None

    def elapsedTime(self):
        if self._start_time is None:
            raise ValueError(f'Таймер не работает. Используйте .start()')
        return round((time.perf_counter() - self._start_time), 2)

    def resetTime(self):
        self._start_time = None
        self.elapsed_time = 0


tm = Timer()
tm.startTime()
print(tm.elapsedTime())
time.sleep(5.535)
print(tm.elapsedTime())
tm.resetTime()
tm.startTime()
time.sleep(2.5)
print(tm.elapsedTime())
tm.stopTime()
